{{ define "base" }}
  <!DOCTYPE html>
  <html lang="en">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My go app</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet"
      integrity="sha384-T3c6CoIi6uLrA9TneNEoa7RxnatzjcDSCmG1MXxSR1GAsXEV/Dwwykc2MPK8M2HN" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.3.4/dist/css/datepicker.min.css">
    <link rel="stylesheet" type="text/css" href="https://unpkg.com/notie/dist/notie.min.css">
    <link rel="stylesheet" type="text/css" href="/static/css/styles.css">

    {{block "css" .}}

    {{end}}

  </head>
  <body>
    <header>
      <nav class="navbar bg-dark navbar-expand-lg bg-body-tertiary" data-bs-theme="dark">
        <div class="container-fluid">
          <a class="navbar-brand" href="/">Bookings</a>
          <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent"
            aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
          </button>
          <div class="collapse navbar-collapse" id="navbarSupportedContent">
            <ul class="navbar-nav me-auto mb-2 mb-lg-0">
              <li class="nav-item">
                <a class="nav-link active" aria-current="page" href="/">Home</a>
              </li>
              <li class="nav-item">
                <a class="nav-link" href="/about">About</a>
              </li>
              <li class="nav-item dropdown">
                <a class="nav-link dropdown-toggle" href="#" role="button" data-bs-toggle="dropdown" aria-expanded="false">
                  Rooms
                </a>
                <ul class="dropdown-menu">
                  <li><a class="dropdown-item" href="/rooms/general">General's quarter</a></li>
                  <li>
                    <hr class="dropdown-divider">
                  </li>
                  <li><a class="dropdown-item" href="/rooms/major">Major's suite</a></li>
                </ul>
              </li>
              <li class="nav-item">
                <a class="nav-link" href="/make_reservation">Make reservation</a>
              </li>
              <li class="nav-item">
                <a class="nav-link" href="/contact">Contact</a>
              </li>
            </ul>
          </div>
        </div>
      </nav>
    </header>

    {{block "content" .}}
      
    {{end}}
    
    <div class="row my-footer text-center align-items-center">
      <div class="col">
        Left
      </div>
      <div class="col">
        Middle
      </div>
      <div class="col">
        Right
      </div>
    </div>


    <script src="https://cdn.jsdelivr.net/npm/vanillajs-datepicker@1.3.4/dist/js/datepicker-full.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.8/dist/umd/popper.min.js"
      integrity="sha384-I7E8VVD/ismYTF4hNIPjVp/Zjvgyol6VFvRkX/vR+Vc4jQkC+hVqc2pM8ODewa9r" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.min.js"
      integrity="sha384-BBtl+eGJRgqQAUMxJ7pMwbEyER4l1g+O15P+16Ep7Q9Q+zqX6gSbd85u4mG4QzX+" crossorigin="anonymous"></script>
    <script src="https://unpkg.com/notie"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script>
      let attention = Prompt();

      // Example starter JavaScript for disabling form submissions if there are invalid fields
      (function () {
        'use strict';
        window.addEventListener('load', function () {
          // Fetch all the forms we want to apply custom Bootstrap validation styles to
          let forms = document.getElementsByClassName('needs-validation');
          // Loop over them and prevent submission
          let validation = Array.prototype.filter.call(forms, function (form) {
            form.addEventListener('submit', function (event) {
              if (form.checkValidity() === false) {
                event.preventDefault();
                event.stopPropagation();
              }
              form.classList.add('was-validated');
            }, false);
          });
        }, false);
      })();

      //Date picker
      const elem = document.getElementById('reservation-date')
      const rangepicker = new DateRangePicker(elem, {
        format: "yyyy-mm-dd",
        autohide:true
      })

      //Notifications
      function notify(msg, msgType) {
        notie.alert({
          type: msgType,
          text: msg,
          position: "top"
        })
      }

      // Modals
      function notifyModal(title, text, icon, confirmBtnText) {
        Swal.fire({
          title: title,
          text: text,
          icon: icon,
          confirmButtonText: confirmBtnText
        })


      }
      const button = document.getElementById("main-btn").addEventListener("click", function () {
        let html = /*html*/`
          <form id="check-availability-form" action="" method="post" class="needs-validation" novalidate>
            <div class="row">
              <div class="col">
                <div class="row" id="reservation-dates-modal">
                  <div class="col">
                    <input required class="form-control" type="text" name="start" id="start" placeholder="arrival">
                  </div>
                  <div class="col">
                    <input required class="form-control" type="text" name="end" id="end" placeholder="departure">
                  </div>
                </div>
              </div>
            </div>
          </form>
        `
        attention.custom({
          msg: html,
          title: "Choose your dates",
          callback: function(result){
            let form = document.getElementById("check-availability-form")
            let formData = new FormData(form)
            formData.append("csrf_token", "{{.CSRFToken}}")

            fetch('/reservation-availability',{
              method:"post",
              body:formData,
            })
          }
        })
      })

      function Prompt() {
        let toast = function (defaults) {
          const {
            msg = "defaut",
            icon = "success",
            position = "top-end"
          } = defaults

          const Toast = Swal.mixin({
            toast: true,
            icon: icon,
            title: msg,
            position: position,
            showConfirmButton: false,
            timer: 3000,
            timerProgressBar: true,
            didOpen: (toast) => {
              toast.onmouseenter = Swal.stopTimer;
              toast.onmouseleave = Swal.resumeTimer;
            }
          });
          Toast.fire({
          });
        }

        let success = function (defaults) {
          const {
            title = "title",
            msg = "defaut",
            footer = ""
          } = defaults

          Swal.fire({
            icon: "success",
            title: title,
            text: msg,
            footer: footer
          })
        }

        let error = function (defaults) {
          const {
            title = "title",
            msg = "defaut",
            footer = ""
          } = defaults

          Swal.fire({
            icon: "error",
            title: title,
            text: msg,
            footer: footer
          })
        }

        async function custom(defaults) {
          const {
            msg = "",
            title = ""
          } = defaults

          const { value: result } = await Swal.fire({
            title: title,
            html: msg,
            background: false,
            focusConfirm: false,
            showCancelButton: true,
            willOpen: () => {
              const elem = document.getElementById("reservation-dates-modal")
              const rp = new DateRangePicker(elem, {
                format: "yyyy-mm-dd",
                showOnFocus: true,
                orientation: "top"
              })
            },
            preConfirm: () => {
              return [
                document.getElementById("start").value,
                document.getElementById("end").value,
              ]
            }
          })
          if(defaults.dismiss !== Swal.DismissReason.cancel){
            if (defaults.value !== ""){
              if (defaults.callback !== undefined){
                defaults.callback(result)
              }
            } else {
              c.callback(false)
            }
          } else {
            c.callback(false)
          }
        }

        return {
          toast: toast,
          success: success,
          error: error,
          custom: custom
        }
      }

    </script>

    {{ block "script" .}}
    
    {{end}}
  </body>
  </html>
{{ end }}